{"version":3,"sources":["Settings.js","App.js","serviceWorker.js","index.js"],"names":["SettingsContainer","styled","div","_templateObject","Button","button","_templateObject2","ButtonContainer","_templateObject3","YButton","_templateObject4","RButton","_templateObject5","BButton","_templateObject6","GButton","_templateObject7","PButton","_templateObject8","NButton","_templateObject9","Online","li","_templateObject10","Title","_templateObject11","Settings","props","react_default","a","createElement","onClick","changeColour","online","length","map","user","key","id","name","substring","msgsEnd","socket","openSocket","typing","Submit","App_templateObject","colour","UserSubmit","App_templateObject2","MsgSubmit","App_templateObject3","Box","input","App_templateObject4","UserBox","App_templateObject5","MsgBox","App_templateObject6","TitleBar","App_templateObject7","Prompt","App_templateObject8","Container","form","App_templateObject9","MsgContainer","App_templateObject10","UserContainer","App_templateObject11","Msg","_templateObject12","GreyText","_templateObject13","Alert","_templateObject14","Timestamp","_templateObject15","ChatBox","_templateObject16","App","_useState","useState","_useState2","Object","slicedToArray","msgvalue","setmsgValue","_useState3","_useState4","uservalue","setuserValue","_useState5","_useState6","messages","setMessages","_useState7","_useState8","setColour","_useState9","_useState10","setOnline","_fetchOnline","asyncToGenerator","regenerator_default","mark","_callee","res","results","wrap","_context","prev","next","fetch","sent","json","stop","apply","this","arguments","_fetchMessages","_callee2","_context2","useEffect","scrollIntoView","behavior","off","console","log","on","fetchOnline","fetchMessages","Fragment","onSubmit","event","preventDefault","emit","autoComplete","value","onChange","target","src_Settings","c","message","i","type","time","content","ref","scrollTo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88ef5e70.chunk.js","sourcesContent":["//import react and styled components\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n//container for the settings and menu\r\nconst SettingsContainer = styled.div`\r\n  background: #23272a;\r\n  padding: 1em;\r\n  margin: 1em;\r\n  position: fixed;\r\n  top: 7em;\r\n  right: -1em;\r\n  width: 20%;\r\n  height: 70%;\r\n\r\n  color: white;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n//parent style for colour customization buttons\r\nconst Button = styled.button`\r\n  width: 6%;\r\n  height: 6%;\r\n  border-radius: 8px;\r\n  margin: 1em;\r\n  color: white;\r\n  border: none;\r\n  padding: 1em;\r\n  :focus {\r\n    outline: none;\r\n  }\r\n`;\r\n//container for the colour selection buttons\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\n//colour selection buttons\r\nconst YButton = styled(Button)`\r\n  background: #fcba03;\r\n`;\r\nconst RButton = styled(Button)`\r\n  background: #e36262;\r\n`;\r\nconst BButton = styled(Button)`\r\n  background: #7289da;\r\n`;\r\nconst GButton = styled(Button)`\r\n  background: #a5de7e;\r\n`;\r\nconst PButton = styled(Button)`\r\n  background: #b47ede;\r\n`;\r\nconst NButton = styled(Button)`\r\n  background: #000000;\r\n`;\r\n\r\n//styled for names of online users\r\nconst Online = styled.li`\r\n  color: #a5de7e;\r\n  margin: 0.5em;\r\n  margin-top: 1.5em;\r\n`;\r\n\r\n//title style\r\nconst Title = styled.div`\r\n  color: white;\r\n  font-size: 1em;\r\n  margin: 0.5em;\r\n`;\r\n\r\n//settings (menu) component\r\nfunction Settings(props) {\r\n  return (\r\n    <SettingsContainer>\r\n      <Title>Colours</Title>\r\n      <ButtonContainer>\r\n        <RButton\r\n          onClick={() => {\r\n            props.changeColour(\"#e36262\");\r\n          }}\r\n        />\r\n        <YButton\r\n          onClick={() => {\r\n            props.changeColour(\" #fcba03\");\r\n          }}\r\n        />\r\n        <GButton\r\n          onClick={() => {\r\n            props.changeColour(\"#a5de7e\");\r\n          }}\r\n        />\r\n        <BButton\r\n          onClick={() => {\r\n            props.changeColour(\"#7289da\");\r\n          }}\r\n        />\r\n        <PButton\r\n          onClick={() => {\r\n            props.changeColour(\"#b47ede\");\r\n          }}\r\n        />\r\n        <NButton\r\n          onClick={() => {\r\n            props.changeColour(\"#000000\");\r\n          }}\r\n        />\r\n      </ButtonContainer>\r\n\r\n      <Title>Online ({props.online.length})</Title>\r\n      {props.online.map(user => (\r\n        <Online key={user.id}>\r\n          {user.name} @ {user.id.substring(7, 20)}\r\n        </Online>\r\n      ))}\r\n    </SettingsContainer>\r\n  );\r\n}\r\n\r\n//export\r\nexport default Settings;\r\n","//import react, styled components, components, socket and declare variable (msgsEnd) which will allow bottom scrolling but does not require state\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Settings from \"./Settings\";\nimport openSocket from \"socket.io-client\";\nlet socket = openSocket(\"http://kan5048:3001\");\nlet msgsEnd;\n\n//varible for if typing emit has been sent to avoid lag\nlet typing = false;\n\n//parent style for buttons\nconst Submit = styled.button`\n  border-radius: 8px;\n  background: ${props => props.colour};\n  color: white;\n  border: none;\n\n  padding: 1em;\n\n  :focus {\n    outline: none;\n  }\n`;\n\n//button for submitting user name\nconst UserSubmit = styled(Submit)`\n  width: 20%;\n  height: 3em;\n  margin-top: 1em;\n`;\n//button for submitting a message\nconst MsgSubmit = styled(Submit)`\n  width: 6%;\n`;\n\n//parent style for inputs\nconst Box = styled.input`\n  border: 0;\n  background: #2c2f33;\n  color: white;\n  border-radius: 8px;\n  padding: 1em;\n  :focus {\n    outline: none;\n  }\n`;\n\n//input box for typing user name\nconst UserBox = styled(Box)`\n  width: 70%;\n  margin: 1em;\n`;\n\n//input box for typing messages\nconst MsgBox = styled(Box)`\n  width: 90%;\n  margin-right: 0.5%;\n`;\n\n//Titlebar styling\nconst TitleBar = styled.div`\n  background: #23272a;\n  padding: 1em;\n  position: fixed;\n  top: 0;\n  width: 100%;\n  display: flex;\n  color: white;\n  font-size: 2em;\n`;\n\n//prompt styling (such as \"Nickname\" prompt before username set input bar)\nconst Prompt = styled.div`\n  color: white;\n\n  margin: 1em;\n  margin-top: 1.5em;\n`;\n\n//parent styling for containers\nconst Container = styled.form`\n  background: #23272a;\n  padding: 1em;\n  position: fixed;\n  display: flex;\n`;\n//container for message sending portion of screen\nconst MsgContainer = styled(Container)`\n  bottom: 0;\n  width: 100%;\n  color: white;\n`;\n//container for user name setting portion of screen\nconst UserContainer = styled(Container)`\n  top: 0;\n  right: 0;\n  width: 20%;\n  border-radius: 8px;\n`;\n\n//styling for message bubbles\nconst Msg = styled.div`\n  margin-top: 0.25em;\n  margin-left: 7em;\n  border-radius: 8px;\n  padding: 1em;\n  padding-top: 0.5em;\n  padding-bottom: 0.5em;\n  background: ${props => props.colour};\n  width: fit-content;\n  color: white;\n  max-width: 60%;\n`;\n\n//parent element for grey text alerts\nconst GreyText = styled.div`\n  padding-top: 1em;\n  margin: 0.5em;\n  padding-bottom: 0.25em;\n  display: inline-block;\n  width: fit-content;\n  color: grey;\n`;\n\n//styling for connection and name change alerts\nconst Alert = styled(GreyText)`\n  && {\n    padding-bottom: 1em;\n  }\n`;\n//timestamp styling\nconst Timestamp = styled(GreyText)`\n  padding: 1em;\n  padding-bottom: 0.25em;\n`;\n\n//container for chat portion of screen\nconst ChatBox = styled.div`\n  background: #2c2f33;\n  margin-top: 8em;\n  margin-bottom: 6em;\n  padding: 0;\n  box-sizing: border-box;\n`;\n\n//app component\nfunction App() {\n  //STATE VARIABLES\n  //value of content in message input\n  const [msgvalue, setmsgValue] = useState(\"\");\n  //value of content in user name input\n  const [uservalue, setuserValue] = useState(\"\");\n  //list of all messages\n  const [messages, setMessages] = useState([]);\n  //selected colour\n  const [colour, setColour] = useState(\"#7289da\");\n  //list of online users\n  const [online, setOnline] = useState([]);\n\n  //function to fetch online users\n  async function fetchOnline() {\n    const res = await fetch(\"http://kan5048:3001/api/online/\");\n\n    const results = await res.json();\n    setOnline(results);\n  }\n\n  //function to set username\n  function setUsername(event) {\n    //prevent reload\n    event.preventDefault();\n\n    if (uservalue.length > 0) {\n      //emit to backend that user was set and send new user\n      socket.emit(\"set user\", uservalue);\n    }\n  }\n\n  //function to send a message\n  function sendMessage(event) {\n    //prevent reload\n    event.preventDefault();\n    if (msgvalue.length > 0) {\n      //emit to backend that a message was sent and send the message\n      socket.emit(\"chat message\", msgvalue);\n      //set typing to false\n      typing = false;\n      //set the value of the input box for messages to blank (spam prevention)\n      setmsgValue(\"\");\n    }\n  }\n\n  //set value msgValue state to what is in input bar\n  function updatemsgValue(event) {\n    //if typing prompt not sent\n    if (!typing) {\n      //emit to backend that user is typing\n      socket.emit(\"typing\");\n      //set typing to true\n      typing = true;\n    }\n\n    setmsgValue(event.target.value);\n  }\n  //set value userValue state to what is in input bar\n  function updateuserValue(event) {\n    setuserValue(event.target.value);\n  }\n\n  //function to fetch message list from backend api every time a new message is sent\n  //TODO: make more efficient so only grabs latest message from api (must add message ids?)\n  async function fetchMessages() {\n    const res = await fetch(\"http://kan5048:3001/api/messages/\");\n\n    const results = await res.json();\n\n    setMessages(results);\n  }\n\n  //scroll to bottom of page so see latest messages\n  function scrollToBottom() {\n    msgsEnd.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  //scroll to bottom each update\n  useEffect(() => {\n    scrollToBottom();\n    //remove listener\n    return () => socket.off(\"new message\", console.log(\"\"));\n  });\n\n  //when backend prompts that a new message was sent, fetch users and online data\n  socket.on(\"new message\", () => {\n    fetchOnline();\n    fetchMessages();\n  });\n\n  //change colour for styled components when user clicks button to change\n  function changeColour(c) {\n    setColour(c);\n  }\n\n  return (\n    <>\n      <TitleBar>(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧</TitleBar>\n      <UserContainer onSubmit={setUsername}>\n        <Prompt>Nickname</Prompt>\n        <UserBox\n          id=\"u\"\n          autoComplete=\"off\"\n          value={uservalue}\n          onChange={updateuserValue}\n        />\n        <UserSubmit colour={colour}>SET</UserSubmit>\n      </UserContainer>\n      <Settings changeColour={changeColour} online={online} />\n      <ChatBox>\n        {messages.length !== 0\n          ? messages.map((message, i) =>\n              message.type === \"message\" ? (\n                <div key={i}>\n                  <Timestamp>{message.time}</Timestamp>\n                  <GreyText>{message.user}</GreyText>\n                  <Msg colour={colour}>{message.content}</Msg>\n                </div>\n              ) : (\n                <div key={i}>\n                  <Timestamp>{message.time}</Timestamp>\n                  <Alert>{message.content}</Alert>\n                </div>\n              )\n            )\n          : \"\"}\n      </ChatBox>\n\n      <MsgContainer onSubmit={sendMessage}>\n        <MsgBox\n          onChange={updatemsgValue}\n          value={msgvalue}\n          id=\"m\"\n          autoComplete=\"off\"\n        />\n        <MsgSubmit colour={colour}>SEND</MsgSubmit>\n      </MsgContainer>\n\n      <div\n        ref={scrollTo => {\n          msgsEnd = scrollTo;\n        }}\n      />\n    </>\n  );\n}\n\n//export component to index\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}